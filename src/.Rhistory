str(diamonds)
diamonds$carat
class(diamonds$carat)
class(diamonds$carat)
summary(diamonds)
diamonds %>% select(color)
diamonds %>% select(price)
diamonds%>%select(price)
diamonds%>%select(price)
diamonds%>%select(price)
diamonds%>%select(price)
diamonds %>% select(price)
library(dplyr)
diamonds %>% select(price)
diamonds %>% select(price)
diamonds %>% select(price, color)
diamonds %>% select(price, color)
diamonds %>% select_if(is.numeric)
diamonds %>% select(-table)
diamonds %>% select(-table, -color)
diamonds %>% slice(4:10)
diamonds %>% filter(price>18000)
diamonds %>% filter(price>18000,color=="D")
diamonds %>% filter(price>18000,color=="D") %>% count()
diamonds %>% filter(price>18000,color=="D") %>% count()
diamonds %>% filter(price>1800,color=="D") %>% count()
diamonds %>% filter(price>18000,color=="D") %>% count()
diamonds %>% arrange(price)
diamonds <- diamonds %>% mutate(priceR=price/carat)
diamonds %>% select(price, color, priceR)
knitr::opts_chunk$set(echo = TRUE)
bats <- read.table(file="bats.csv",skip=3,header=TRUE,sep=";")
class(bats)
View(bats)
View(bats)
bats[:5]
bats[5]
head(bats, n=5)
nrow(bats)
nrow(bats)
ncol(bats)
nrow(bats) * ncol(bats)
str(bats)
summary(bats)
class(bats$Diet)
bats$Diet <- as.factor(bats$Diet)
class(bats$Diet)
class(bats$Diet)
bats$Diet <- as.factor(bats$Diet)
class(bats$Diet)
class(bats$Diet)
bats$Diet <- as.factor(bats$Diet)
class(bats$Diet)
table(bats$Di)
bats$Diet %>% table()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(corrplot)
library(cowplot)
bats$Diet %>% table()
library(magrittr)
library(dplyr)
bats$Diet %>% table()
table(bats$Diet, bats$Clade)
batsSV <- bats %>% mutate(Clade2 = replace(Clade, which(Clade == "III"), "II")) %>% filter(Diet !=
"4") %>% dplyr::select(-Clade)
batsSV$Diet <- droplevels(batsSV$Diet) # enlève les modalités de la variable Diet qui n'existent plus
batsSV$Clade2 <- droplevels(batsSV$Clade2)
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(cowplot)
library(dplyr)
library(magrittr)
bats <- read.table(file="bats.csv",skip=3,header=TRUE,sep=";")
class(bats)
head(bats, n=5)
nrow(bats) * ncol(bats)
str(bats)
summary(bats)
bats$Diet <- as.factor(bats$Diet)
class(bats$Diet)
bats$Clade <- as.factor(bats$Clade)
class(bats$Clade)
bats$Diet %>% table()
table(bats$Diet, bats$Clade)
batsSV <- bats %>% mutate(Clade2 = replace(Clade, which(Clade == "III"), "II")) %>% filter(Diet !=
"4") %>% dplyr::select(-Clade)
batsSV$Diet <- droplevels(batsSV$Diet) # enlève les modalités de la variable Diet qui n'existent plus
batsSV$Clade2 <- droplevels(batsSV$Clade2)
table(batsSV$Diet,batsSV$Clade2)
plot(pressure)
View(batsSV)
View(batsSV)
5*15
x <- 5*15
x
x / 2
remove(x)
x
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(cowplot)
library(dplyr)
library(magrittr)
bats <- read.table(file="bats.csv",skip=3,header=TRUE,sep=";")
class(bats)
head(bats, n=5)
nrow(bats) * ncol(bats)
str(bats)
summary(bats)
bats$Diet <- as.factor(bats$Diet)
class(bats$Diet)
bats$Clade <- as.factor(bats$Clade)
class(bats$Clade)
bats$Diet %>% table()
bats
table(bats$Diet, bats$Clade)
batsSV <- bats %>% mutate(Clade2 = replace(Clade, which(Clade == "III"), "II")) %>% filter(Diet !=
"4") %>% dplyr::select(-Clade)
batsSV$Diet <- droplevels(batsSV$Diet) # enlève les modalités de la variable Diet qui n'existent plus
batsSV$Clade2 <- droplevels(batsSV$Clade2)
table(batsSV$Diet,batsSV$Clade2)
plot(pressure)
bats %>% group_by(bats$Diet) %>% count()
bats$Diet %>% table()
table(bats$Diet, bats$Clade) %>% plot()
table(bats$Diet, bats$Clade)
bats %>% group_by(bats$Diet) %>% count() %>% plot()
bats %>% group_by(bats$Diet) %>% count()
bats %>% group_by(bats$Diet) %>% count
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(cowplot)
library(dplyr)
library(magrittr)
bats <- read.table(file="bats.csv",skip=3,header=TRUE,sep=";")
class(bats)
head(bats, n=5)
nrow(bats) * ncol(bats)
str(bats)
summary(bats)
bats$Diet <- as.factor(bats$Diet)
class(bats$Diet)
bats$Clade <- as.factor(bats$Clade)
class(bats$Clade)
bats %>% group_by(bats$Diet) %>% count()
# ou bats$Diet %>% table()
table(bats$Diet, bats$Clade)
batsSV <-
bats %>% mutate(Clade2 = replace(Clade, which(Clade == "III"), "II")) %>% filter(Diet != "4") %>% dplyr::select(-Clade)
batsSV$Diet <- droplevels(batsSV$Diet) # enlève les modalités de la variable Diet qui n'existent plus
batsSV$Clade2 <- droplevels(batsSV$Clade2)
table(batsSV$Diet,batsSV$Clade2)
batsSV %>% select(BOW)
batsSV %>% filter(BOW > 50)
batsSV %>% filter(Diet = 3)
batsSV %>% filter(Diet == 3)
batsSV %>% filter(Diet == 3)
batsSV %>% filter(Diet, 3)
batsSV %>% filter(Diet==3)
batsSV %>% filter(Diet==3)
bats %>% group_by(bats$Diet)
bats %>% group_by(Diet) %>% count(BOW)
bats %>% group_by(bats$Diet) %>% count()
bats %>% group_by(Diet)
batsSV %>% group_by(Diet)
bats %>% group_by(bats$Diet) %>% count()
bats %>% group_by(bats$Diet) %>% count() %>% plot()
bats %>% group_by(bats$Diet) %>% count()
batsSV %>% group_by(bats$Diet) %>% count()
batsSV %>% group_by(Diet) %>% count()
batsSV %>% group_by(Diet)
batsSV %>% group_by(Diet) %>% count
batsSV %>% group_by(Diet) %>% summarise()
batsSV %>% group_by(Diet) %>% summarise(BOW)
batsSV %>% summarise(BOW)
batsSV %>% select(BOW)
batsSV %>% select(BOW) %>% summarise()
batsSV %>% summarise(BOW)
batsSV %>% group_by(BOW)
batsSV %>% group_by(Diet)
batsSV %>% group_by(Diet) %>% select()
batsSV %>% group_by(Diet)
batsSV %>% group_by(Diet) %>% count()
batsSV %>% group_by(Diet) %>% summarise(mean())
batsSV %>% group_by(Diet) %>% summarise(mean)
batsSV %>% group_by(Diet) %>% summarise_if(is.numeric(), mean())
batsSV %>% group_by(Diet) %>% summarise_if(is.numeric(), mean(BOW))
batsSV %>% group_by(Diet) %>% summarise(mean(BOW))
bats %>% group_by(bats$Diet) %>% count() %>% ggplot()
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(ggplot)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
bats %>% group_by(bats$Diet) %>% count() %>% ggplot()
bats %>% group_by(bats$Diet) %>% count() %>% ggplot2()
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(cowplot)
library(dplyr)
library(ggplot2)
bats <- read.table(file="bats.csv",skip=3,header=TRUE,sep=";")
class(bats)
head(bats, n=5)
nrow(bats) * ncol(bats)
str(bats)
summary(bats)
bats$Diet <- as.factor(bats$Diet)
class(bats$Diet)
bats$Clade <- as.factor(bats$Clade)
class(bats$Clade)
bats %>% group_by(bats$Diet) %>% count() %>% ggplot2()
bats %>% group_by(bats$Diet) %>% count() %>% ggplot()
bats %>% group_by(bats$Diet) %>% count() %>% plot()
ggplot(diamonds, aes(x = cut)) + geom_bar()
bats %>% group_by(bats$Diet) %>% count() %>% ggplot() + geom_bar()
bats %>% group_by(bats$Diet) %>% count() %>% plot()
batsSV %>% ggplot()
batsSV %>% ggplot(aes(x=BOW))
batsSV %>% ggplot(aes(x=BOW)) + geom_bar()
batsSV %>% ggplot(aes(x=BRW)) + geom_bar()
batsSV$BRW %>% ggplot(aes(x=BRW)) + geom_bar()
batsSV$BRW %>% ggplot(aes(x=BRW)) + geom_bar()
batsSV %>% ggplot(aes(x=BRW)) + geom_bar()
batsSV %>% ggplot(aes(y=BRW)) + geom_bar()
batsSV %>% ggplot(aes(x=BRW)) + geom_histogram(binwidth=200)
batsSV %>% ggplot(aes(y=BRW)) + geom_histogram(binwidth=200)
batsSV %>% ggplot(aes(x=BRW)) + geom_histogram(binwidth=200)
batsSV %>% ggplot(aes(x=BRW, y=BOW)) + geom_histogram(binwidth=200)
batsSV %>% ggplot(aes(x=BRW)) + geom_histogram(binwidth=200)
batsSV %>% ggplot(aes(x=BRW)) + geom_point()
batsSV %>% ggplot(aes(x=BRW, y=BOW)) + geom_point()
batsSV %>% ggplot(aes(x=BRW, y=BOW, fill=Diet)) + geom_point()
batsSV %>% filter(BOW < 750) %>% ggplot(aes(x=BRW, y=BOW)) + geom_point()
batsSV %>% ggplot(aes(x=BRW, y=BOW, col=Diet)) + geom_point()
batsSV %>% filter(BOW < 750) %>% ggplot(aes(x=BRW, y=BOW, col=Diet)) + geom_point()
batsSV %>% filter(BOW < 750) %>% ggplot(aes(x=BRW, y=BOW, col=Diet)) + geom_point()
batsSV %>% filter(BOW < 750) %>% ggplot(aes(x=BOW, y=BRW, col=Diet)) + geom_point()
batsSV %>% filter(BOW < 750) %>% ggplot(aes(x=BOW, y=BRW)) + geom_point()
library(ade4)
install.packages("ade4")
library(ade4)
library(ade4)
install.packages("ade4")
install.packages("ade4")
setwd("/home/gabriel/Miage/M2/S1/DataMining/projet/src")
getwd()
library(corrplot)
library(cowplot)
library(ggplot2)
library(sqldf)
library(tidyverse)
cinema <- read.table(file="../data/cinema.csv", header=TRUE, sep=",")
str(cinema)
#Importation du package
library(raster)
#Découpage des régions avant 2015
FranceFormes <- getData(name="GADM", country="FRA", level=1)
plot(FranceFormes, main="Carte de la France")
# Nombre d'établissement par Région
nombreDEtablissementParRegion <- cinema %>% dplyr::select(NomRegion, NbEtablissement) %>% group_by(NomRegion) %>% summarise(NbEtablissement = sum (NbEtablissement))
FranceFormes$NAME_1
cinema$NomRegion %>% unique()
a <- str_sort(FranceFormes$NAME_1)
b <- str_sort(cinema$NomRegion %>% unique())
a
b
all.equal(a, b)
getSrcDirectory()[1]
getSrcDirectory()
rstudioapi::getActiveDocumentContext()$path
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
baseChomage=read.csv2("https://dimension.usherbrooke.ca/donnees/FPP4.csv", header=TRUE, encoding="latin1")
baseChomage$departement
View(baseChomage)
View(nombreDEtablissementParRegion)
View(nombreDEtablissementParRegion)
nombreDEtablissementParRegion[idx]
# Etablissement de l'index
idx <- match(formes$NAME_1, nombreDEtablissementParRegion$NomRegion)
# Etablissement de l'index
idx <- match(formes$NAME_1, nombreDEtablissementParRegion$NomRegion)
# Etablissement de l'index
idx <- match(FranceFormes$NAME_1, nombreDEtablissementParRegion$NomRegion)
nombreDEtablissementParRegion[idx, "NbEtablissement"]
concordance <- nombreDEtablissementParRegion[idx, "NbEtablissement"]
View(concordance)
couleurs <- colorRampPalette(c('white', 'yellow'))
View(couleurs)
View(couleurs)
spplot(FranceFormes, "NbEtablissement", col.regions=couleurs(30),  main=list(label="Nombre de cinéma par région",cex=.8))
couleurs <- colorRampPalette(c('white', 'yellow'))
spplot(FranceFormes, "NbEtablissement", col.regions=couleurs(30),  main=list(label="Nombre de cinéma par région",cex=.8))
FranceFormes$NbEtablissement <- concordance
couleurs <- colorRampPalette(c('white', 'yellow'))
spplot(FranceFormes, "NbEtablissement", col.regions=couleurs(30),  main=list(label="Nombre de cinéma par région",cex=.8))
View(FranceFormes)
cinemaTest <- read.table(file="../temp/Cinema.csv", header=TRUE, sep=",")
cinemaTest <- read.table(file="../tmp/Cinema.csv", header=TRUE, sep=",")
spplot(FranceFormes, "NbEtablissement", col.regions=couleurs(30),  main=list(label="Nombre de cinéma par région",cex=.8))
spplot(FranceFormes, "NbEtablissement", col.regions=couleurs(30),  main=list(label="Nombre de cinéma par région",cex=.8))
# Set working directory to current file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(corrplot)
library(cowplot)
library(ggplot2)
library(sqldf)
library(tidyverse)
cinema <- read.table(file="../data/cinema.csv", header=TRUE, sep=",")
str(cinema)
# Récupération des données carto graphique des régions de France
FranceFormes <- getData(name="GADM", country="FRA", level=1)
# Vérifier que les 2 listes de régions concordent
all.equal(str_sort(
FranceFormes$NAME_1),
str_sort(cinema$NomRegion %>% unique()
)
)
# Etablissement de l'index
idx <- match(FranceFormes$NAME_1, nombreDEtablissementParRegion$NomRegion)
# Calcul nombre d'établissement par Région
nombreDEtablissementParRegion <- cinema %>% dplyr::select(NomRegion, NbEtablissement) %>% group_by(NomRegion) %>% summarise(NbEtablissement = sum (NbEtablissement))
# Etablissement de l'index
idx <- match(FranceFormes$NAME_1, nombreDEtablissementParRegion$NomRegion)
FranceFormes$NbEtablissement <- nombreDEtablissementParRegion[idx, "NbEtablissement"]
couleurs <- colorRampPalette(c('white', 'yellow'))
spplot(FranceFormes, "NbEtablissement", col.regions=couleurs(30),  main=list(label="Nombre de cinéma par région",cex=.8))
cinema %>% dplyr::select(NomRegion, NbEtablissement) %>% group_by(NomRegion) %>% summarise(NbEtablissement = sum (NbEtablissement))
cinema %>% dplyr::select(NomRegion, NbEtablissement, population) %>% group_by(NomRegion)
cinema %>% dplyr::select(NomRegion, NbEtablissement, population)
cinema %>%
cinema
cinema
cinema %>%  dplyr::select(NomRegion, NbEtablissement)
cinema %>%  dplyr::select(NomRegion, NbEtablissement, Population)
cinema %>%  dplyr::select(NomRegion, NbEtablissement, Population) %>% group_by(NomRegion)
cinema %>%  dplyr::select(NomRegion, NbEtablissement, Population) %>% group_by(NomRegion) %>% summarise(NbEtablissement = sum (NbEtablissement))
cinema %>%  dplyr::select(NomRegion, NbEtablissement, Population) %>% group_by(NomRegion) %>% summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population))
cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
cinema$Test = 0
cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population))
cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
add_column(Add_Column = "Value")
cinema
clear
cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
add_column(Add_Column = NbEtablissement/Population)
cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
mutate(Test= NbEtablissement/Population)
cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
mutate(Test= NbEtablissement/ (Population*1000000))
cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
mutate(Test= (Population*1000000) / NbEtablissement)
1000000
cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
mutate(Test= NbEtablissement/ (Population*1000000))
nombreDeCinemaParHabitantParRegion <- cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
mutate(Test= NbEtablissement/ (Population*1000000))
View(nombreDeCinemaParHabitantParRegion)
View(nombreDeCinemaParHabitantParRegion)
# nombreDeCinemaParHabitantParRegion
nombreDeCinemaParHabitantParRegion <- cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
mutate(CinemaParHabitant= NbEtablissement/ (Population*1000000))
# Set working directory to current file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(corrplot)
library(cowplot)
library(ggplot2)
library(sqldf)
library(tidyverse)
library(raster)
cinema <- read.table(file="../data/cinema.csv", header=TRUE, sep=",")
# Récupération des données carto graphique des régions de France
FranceFormes <- getData(name="GADM", country="FRA", level=1)
# Vérifier que les 2 listes de régions concordent
all.equal(str_sort(
FranceFormes$NAME_1),
str_sort(cinema$NomRegion %>% unique()
)
)
# Calcul nombre d'établissement par Région
nbEtablissementParRegion <- cinema %>%
dplyr::select(NomRegion, NbEtablissement) %>%
group_by(NomRegion) %>% summarise(NbEtablissement = sum (NbEtablissement))
# Affichage
idx <- match(FranceFormes$NAME_1, nombreDEtablissementParRegion$NomRegion)
# Set working directory to current file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(corrplot)
library(cowplot)
library(ggplot2)
library(sqldf)
library(tidyverse)
library(raster)
cinema <- read.table(file="../data/cinema.csv", header=TRUE, sep=",")
# Récupération des données carto graphique des régions de France
FranceFormes <- getData(name="GADM", country="FRA", level=1)
# Vérifier que les 2 listes de régions concordent
all.equal(str_sort(
FranceFormes$NAME_1),
str_sort(cinema$NomRegion %>% unique()
)
)
# Calcul nombre d'établissement par Région
nbEtablissementParRegion <- cinema %>%
dplyr::select(NomRegion, NbEtablissement) %>%
group_by(NomRegion) %>% summarise(NbEtablissement = sum (NbEtablissement))
# Affichage
idx <- match(FranceFormes$NAME_1, nbEtablissementParRegion$NomRegion)
FranceFormes$NbEtablissement <- nbEtablissementParRegion[idx, "NbEtablissement"]
couleurs <- colorRampPalette(c('white', 'yellow'))
spplot(FranceFormes, "NbEtablissement", col.regions=couleurs(30),  main=list(label="Nombre de cinéma",cex=.8))
# nombreDeCinemaParHabitantParRegion
nbEtablissementParHabitantParRegion <- cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
mutate(EtablissementParHabitant= NbEtablissement/ (Population*1000000))
# Affichage
idx <- match(FranceFormes$NAME_1, nbEtablissementParHabitantParRegion$NomRegion)
FranceFormes$nbEtablissementParHabitant <- nbEtablissementParHabitantParRegion[idx, "EtablissementParHabitant"]
couleurs <- colorRampPalette(c('white', 'blue'))
spplot(FranceFormes, "nbEtablissementParHabitant", col.regions=couleurs(30),  main=list(label="Nombre de cinéma par habitant",cex=.8))
FranceFormes$nbEtablissementParHabitant <- nbEtablissementParHabitantParRegion[idx, "EtablissementParHabitant"]
couleurs <- colorRampPalette(c('white', 'blue'))
spplot(FranceFormes, "nbEtablissementParHabitant", col.regions=couleurs(30),  main=list(label="Nombre de cinéma par habitant",cex=.8))
cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
mutate(EtablissementParHabitant= NbEtablissement/ (Population*1000000))
FranceFormes$NbEtablissementParHabitant <- nbEtablissementParHabitantParRegion[idx, "EtablissementParHabitant"]
couleurs <- colorRampPalette(c('white', 'blue'))
spplot(FranceFormes, "NbEtablissementParHabitant", col.regions=couleurs(30),  main=list(label="Nombre de cinéma par habitant",cex=.8))
# Calcul nombre de cinéma par habitant par région
nbEtablissementParHabitantParRegion <- cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
mutate(EtablissementParHabitant= NbEtablissement/ (Population*1000000))
cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
mutate(EtablissementParHabitant= NbEtablissement/ (Population*1000000))
# Calcul nombre de cinéma par habitant par région
nbEtablissementParHabitantParRegion <- cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
mutate(EtablissementParHabitant= NbEtablissement/ (Population*1000000))
View(nbEtablissementParHabitantParRegion)
# Affichage
idx <- match(FranceFormes$NAME_1, nbEtablissementParHabitantParRegion$NomRegion)
FranceFormes$NbEtablissementParHabitant <- nbEtablissementParHabitantParRegion[idx, "EtablissementParHabitant"]
couleurs <- colorRampPalette(c('white', 'blue'))
spplot(FranceFormes, "NbEtablissementParHabitant", col.regions=couleurs(30),  main=list(label="Nombre de cinéma par habitant",cex=.8))
nbEtablissementParHabitantParRegion$NomRegion
FranceFormes$NAME_1
# Calcul nombre de cinéma par habitant par région
nbEtablissementParHabitantParRegion <- cinema %>%
dplyr::select(NomRegion, NbEtablissement, Population) %>%
group_by(NomRegion) %>%
summarise(NbEtablissement = sum (NbEtablissement), Population = sum (Population)) %>%
mutate(NbEtablissementParHabitant= NbEtablissement/ (Population*1000000))
# Affichage
FranceFormes$NbEtablissementParHabitant <- nbEtablissementParHabitantParRegion[idx, "NbEtablissementParHabitant"]
couleurs <- colorRampPalette(c('white', 'blue'))
spplot(FranceFormes, "NbEtablissementParHabitant", col.regions=couleurs(30),  main=list(label="Nombre de cinéma par habitant",cex=.8))
